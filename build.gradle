plugins {
    id "dev.architectury.loom" version '1.7.+'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group


repositories {
    maven { url "https://maven.nucleoid.xyz" }
    maven { url "https://jitpack.io" }
    maven { url "https://maven.neoforged.net/releases/" }
    maven { url "https://maven.su5ed.dev/releases" }
}

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

loom {
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Test Mod Client"
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Test Mod Server"
            source sourceSets.testmod
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered {
        it.mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        it.mappings("dev.architectury:yarn-mappings-patch-neoforge:${project.neoforge_yarn_patch}")
    }
    neoForge "net.neoforged:neoforge:${project.neo_version}"
    modImplementation "org.sinytra.forgified-fabric-api:forgified-fabric-api:${project.fabric_version}"
    testmodImplementation sourceSets.main.output
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            version    : version,
            mc         : minecraft_version,
            neo        : neo_version,
            nml        : meta_nml,
            id         : meta_id,
            name       : meta_name,
            license    : meta_license,
            authors    : meta_authors,
            description: meta_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 21
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
}
